{"ast":null,"code":"import axios from \"axios\";\nimport localForage from \"localforage\";\nconst fileCache = localForage.createInstance({\n  name: \"filecache\"\n});\n\nconst getCachedPath = path => fileCache.getItem(path);\n\nconst convertCSSToJSS = css => `\n  const style = document.createElement('style')\n  style.innerText = '${css}'\n  document.head.appendChild(style)\n`;\n\nconst escapeCSS = css => css.replace(/\\n/g, \"\").replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\");\n\nexport const fetchPlugin = userInput => {\n  return {\n    name: \"fetch-plugin\",\n\n    setup(build) {\n      build.onLoad({\n        filter: /(^index\\.js$)/\n      }, () => {\n        return {\n          loader: \"jsx\",\n          contents: userInput\n        };\n      });\n      build.onLoad({\n        filter: /.css$/\n      }, async args => {\n        const cachedResult = await getCachedPath(args.path);\n\n        if (cachedResult) {\n          return cachedResult;\n        }\n\n        const {\n          data,\n          request\n        } = await axios.get(args.path);\n        const escaped = escapeCSS(data);\n        const contents = convertCSSToJSS(escaped);\n        const result = {\n          loader: \"jsx\",\n          contents,\n          resolveDir: new URL(\"./\", request.responseURL).pathname\n        };\n        await fileCache.setItem(args.path, result);\n        return result;\n      });\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        const cachedResult = await getCachedPath(args.path);\n\n        if (cachedResult) {\n          return cachedResult;\n        }\n\n        const {\n          data,\n          request\n        } = await axios.get(args.path);\n        const fileType = args.path.match(/.css$/) ? \"css\" : \"jsx\";\n        const escaped = data.replace(/\\n/g, \"\").replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\");\n        const contents = fileType === \"css\" ? convertCSSToJSS(escaped) : data;\n        const result = {\n          loader: \"jsx\",\n          contents,\n          resolveDir: new URL(\"./\", request.responseURL).pathname\n        };\n        await fileCache.setItem(args.path, result);\n        return result;\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["/home/joeldt/jbook/src/plugins/fetch-plugin.ts"],"names":["axios","localForage","fileCache","createInstance","name","getCachedPath","path","getItem","convertCSSToJSS","css","escapeCSS","replace","fetchPlugin","userInput","setup","build","onLoad","filter","loader","contents","args","cachedResult","data","request","get","escaped","result","resolveDir","URL","responseURL","pathname","setItem","fileType","match"],"mappings":"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","sourcesContent":["import * as esbuild from \"esbuild-wasm\";\nimport axios from \"axios\";\nimport localForage from \"localforage\";\n\nconst fileCache = localForage.createInstance({\n  name: \"filecache\",\n});\n\nconst getCachedPath = (path: string) =>\n  fileCache.getItem<esbuild.OnLoadResult>(path);\n\nconst convertCSSToJSS = (css: string) => `\n  const style = document.createElement('style')\n  style.innerText = '${css}'\n  document.head.appendChild(style)\n`;\n\nconst escapeCSS = (css: string) =>\n  css.replace(/\\n/g, \"\").replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\");\n\nexport const fetchPlugin = (userInput: string) => {\n  return {\n    name: \"fetch-plugin\",\n    setup(build: esbuild.PluginBuild) {\n      build.onLoad({ filter: /(^index\\.js$)/ }, () => {\n        return {\n          loader: \"jsx\",\n          contents: userInput,\n        };\n      });\n\n      build.onLoad({ filter: /.css$/ }, async (args: any) => {\n        const cachedResult = await getCachedPath(args.path);\n\n        if (cachedResult) {\n          return cachedResult;\n        }\n\n        const { data, request } = await axios.get(args.path);\n\n        const escaped = escapeCSS(data);\n        const contents = convertCSSToJSS(escaped);\n\n        const result: esbuild.OnLoadResult = {\n          loader: \"jsx\",\n          contents,\n          resolveDir: new URL(\"./\", request.responseURL).pathname,\n        };\n\n        await fileCache.setItem(args.path, result);\n\n        return result;\n      });\n\n      build.onLoad({ filter: /.*/ }, async (args: any) => {\n        const cachedResult = await getCachedPath(args.path);\n\n        if (cachedResult) {\n          return cachedResult;\n        }\n\n        const { data, request } = await axios.get(args.path);\n\n        const fileType = args.path.match(/.css$/) ? \"css\" : \"jsx\";\n        const escaped = data\n          .replace(/\\n/g, \"\")\n          .replace(/\"/g, '\\\\\"')\n          .replace(/'/g, \"\\\\'\");\n        const contents = fileType === \"css\" ? convertCSSToJSS(escaped) : data;\n\n        const result: esbuild.OnLoadResult = {\n          loader: \"jsx\",\n          contents,\n          resolveDir: new URL(\"./\", request.responseURL).pathname,\n        };\n\n        await fileCache.setItem(args.path, result);\n\n        return result;\n      });\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}