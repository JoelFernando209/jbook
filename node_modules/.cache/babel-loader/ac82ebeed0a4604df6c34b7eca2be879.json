{"ast":null,"code":"import axios from \"axios\";\nimport localForage from \"localforage\";\nconst fileCache = localForage.createInstance({\n  name: \"filecache\"\n});\nexport const unpkgPathPlugin = () => {\n  return {\n    name: \"unpkg-path-plugin\",\n\n    setup(build) {\n      build.onResolve({\n        filter: /.*/\n      }, async args => {\n        console.log(\"onResolve\", args);\n\n        if (args.path === \"index.js\") {\n          return {\n            path: args.path,\n            namespace: \"a\"\n          };\n        }\n\n        if (args.path.includes(\"./\") || args.path.includes(\"../\")) {\n          return {\n            namespace: \"a\",\n            path: new URL(args.path, \"https://unpkg.com\" + args.resolveDir + \"/\").href\n          };\n        }\n\n        return {\n          namespace: \"a\",\n          path: `https://unpkg.com/${args.path}`\n        };\n      });\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        console.log(\"onLoad\", args);\n\n        if (args.path === \"index.js\") {\n          return {\n            loader: \"jsx\",\n            contents: `\n              import React from 'react'\n              import ReactDOM from 'react-dom'\n\n              console.log(React, ReactDOM)\n            `\n          };\n        } // Check to see if we have already fetched this file\n        // and if its in the cache\n\n\n        const cachedResult = await localForage.getItem(args.path);\n\n        if (cachedResult) {\n          return cachedResult;\n        } // If it is, return it immediately. If not, continue.\n\n\n        const {\n          data,\n          request\n        } = await axios.get(args.path); // store response in cache\n\n        const resultObj = {\n          loader: \"jsx\",\n          contents: data,\n          resolveDir: new URL(\"./\", request.responseURL).pathname\n        };\n        await localForage.setItem(args.path, resultObj);\n        return resultObj;\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["/home/joeldt/jbook/src/plugins/unpkg-path-plugin.ts"],"names":["axios","localForage","fileCache","createInstance","name","unpkgPathPlugin","setup","build","onResolve","filter","args","console","log","path","namespace","includes","URL","resolveDir","href","onLoad","loader","contents","cachedResult","getItem","data","request","get","resultObj","responseURL","pathname","setItem"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAACE,cAAZ,CAA2B;AAC3CC,EAAAA,IAAI,EAAE;AADqC,CAA3B,CAAlB;AAUA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACnC,SAAO;AACLD,IAAAA,IAAI,EAAE,mBADD;;AAELE,IAAAA,KAAK,CAACC,KAAD,EAA6B;AAChCA,MAAAA,KAAK,CAACC,SAAN,CAAgB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAhB,EAAkC,MAAOC,IAAP,IAAqB;AACrDC,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,IAAzB;;AACA,YAAIA,IAAI,CAACG,IAAL,KAAc,UAAlB,EAA8B;AAC5B,iBAAO;AAAEA,YAAAA,IAAI,EAAEH,IAAI,CAACG,IAAb;AAAmBC,YAAAA,SAAS,EAAE;AAA9B,WAAP;AACD;;AAED,YAAIJ,IAAI,CAACG,IAAL,CAAUE,QAAV,CAAmB,IAAnB,KAA4BL,IAAI,CAACG,IAAL,CAAUE,QAAV,CAAmB,KAAnB,CAAhC,EAA2D;AACzD,iBAAO;AACLD,YAAAA,SAAS,EAAE,GADN;AAELD,YAAAA,IAAI,EAAE,IAAIG,GAAJ,CACJN,IAAI,CAACG,IADD,EAEJ,sBAAsBH,IAAI,CAACO,UAA3B,GAAwC,GAFpC,EAGJC;AALG,WAAP;AAOD;;AAED,eAAO;AACLJ,UAAAA,SAAS,EAAE,GADN;AAELD,UAAAA,IAAI,EAAG,qBAAoBH,IAAI,CAACG,IAAK;AAFhC,SAAP;AAID,OApBD;AAsBAN,MAAAA,KAAK,CAACY,MAAN,CAAa;AAAEV,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA+B,MAAOC,IAAP,IAA+B;AAC5DC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAtB;;AAEA,YAAIA,IAAI,CAACG,IAAL,KAAc,UAAlB,EAA8B;AAC5B,iBAAO;AACLO,YAAAA,MAAM,EAAE,KADH;AAELC,YAAAA,QAAQ,EAAG;AACvB;AACA;AACA;AACA;AACA;AAPiB,WAAP;AASD,SAb2D,CAe5D;AACA;;;AACA,cAAMC,YAAY,GAAG,MAAMrB,WAAW,CAACsB,OAAZ,CAAoBb,IAAI,CAACG,IAAzB,CAA3B;;AAEA,YAAIS,YAAJ,EAAkB;AAChB,iBAAOA,YAAP;AACD,SArB2D,CAuB5D;;;AAEA,cAAM;AAAEE,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAoB,MAAMzB,KAAK,CAAC0B,GAAN,CAAUhB,IAAI,CAACG,IAAf,CAAhC,CAzB4D,CA0B5D;;AAEA,cAAMc,SAAS,GAAG;AAChBP,UAAAA,MAAM,EAAE,KADQ;AAEhBC,UAAAA,QAAQ,EAAEG,IAFM;AAGhBP,UAAAA,UAAU,EAAE,IAAID,GAAJ,CAAQ,IAAR,EAAcS,OAAO,CAACG,WAAtB,EAAmCC;AAH/B,SAAlB;AAMA,cAAM5B,WAAW,CAAC6B,OAAZ,CAAoBpB,IAAI,CAACG,IAAzB,EAA+Bc,SAA/B,CAAN;AAEA,eAAOA,SAAP;AACD,OArCD;AAsCD;;AA/DI,GAAP;AAiED,CAlEM","sourcesContent":["import * as esbuild from \"esbuild-wasm\";\nimport axios from \"axios\";\nimport localForage from \"localforage\";\n\nconst fileCache = localForage.createInstance({\n  name: \"filecache\",\n});\n\ninterface LoadInfo {\n  loader: string;\n  contents: string;\n  resolveDir: string;\n}\n\nexport const unpkgPathPlugin = () => {\n  return {\n    name: \"unpkg-path-plugin\",\n    setup(build: esbuild.PluginBuild) {\n      build.onResolve({ filter: /.*/ }, async (args: any) => {\n        console.log(\"onResolve\", args);\n        if (args.path === \"index.js\") {\n          return { path: args.path, namespace: \"a\" };\n        }\n\n        if (args.path.includes(\"./\") || args.path.includes(\"../\")) {\n          return {\n            namespace: \"a\",\n            path: new URL(\n              args.path,\n              \"https://unpkg.com\" + args.resolveDir + \"/\"\n            ).href,\n          };\n        }\n\n        return {\n          namespace: \"a\",\n          path: `https://unpkg.com/${args.path}`,\n        };\n      });\n\n      build.onLoad({ filter: /.*/ }, async (args: any): LoadInfo => {\n        console.log(\"onLoad\", args);\n\n        if (args.path === \"index.js\") {\n          return {\n            loader: \"jsx\",\n            contents: `\n              import React from 'react'\n              import ReactDOM from 'react-dom'\n\n              console.log(React, ReactDOM)\n            `,\n          };\n        }\n\n        // Check to see if we have already fetched this file\n        // and if its in the cache\n        const cachedResult = await localForage.getItem(args.path);\n\n        if (cachedResult) {\n          return cachedResult;\n        }\n\n        // If it is, return it immediately. If not, continue.\n\n        const { data, request } = await axios.get(args.path);\n        // store response in cache\n\n        const resultObj = {\n          loader: \"jsx\",\n          contents: data,\n          resolveDir: new URL(\"./\", request.responseURL).pathname,\n        };\n\n        await localForage.setItem(args.path, resultObj);\n\n        return resultObj;\n      });\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}